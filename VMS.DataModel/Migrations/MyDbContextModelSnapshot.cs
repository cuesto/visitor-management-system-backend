// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VMS.DataModel.DAL;

namespace VMS.DataModel.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("VMS.DataModel.Entities.BlackList", b =>
                {
                    b.Property<int>("BlackListKey")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime>("EndDate");

                    b.Property<byte>("IsDeleted");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("BlackListKey");

                    b.ToTable("BlackList");
                });

            modelBuilder.Entity("VMS.DataModel.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentKey")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte>("IsDeleted");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.HasKey("DepartmentKey");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("VMS.DataModel.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeKey")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<int>("DepartmentKey");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(50);

                    b.Property<byte>("IsDeleted");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("OfficePhone")
                        .HasMaxLength(50);

                    b.Property<string>("OfficePhoneExt")
                        .HasMaxLength(50);

                    b.HasKey("EmployeeKey");

                    b.HasIndex("DepartmentKey");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("VMS.DataModel.Entities.EmployeeRequest", b =>
                {
                    b.Property<int>("EmployeeRequestKey")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments")
                        .HasMaxLength(100);

                    b.Property<string>("Company")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<int>("EmployeeKey");

                    b.Property<DateTime>("EndDate");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<byte>("IsDeleted");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<int>("PurposeKey");

                    b.Property<DateTime>("StartDate");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("Status");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(50);

                    b.Property<string>("VisitorEmail")
                        .HasMaxLength(50);

                    b.Property<string>("VisitorName")
                        .HasMaxLength(50);

                    b.Property<string>("VisitorPhone")
                        .HasMaxLength(50);

                    b.HasKey("EmployeeRequestKey");

                    b.HasIndex("EmployeeKey");

                    b.HasIndex("PurposeKey");

                    b.ToTable("EmployeeRequest");
                });

            modelBuilder.Entity("VMS.DataModel.Entities.Purpose", b =>
                {
                    b.Property<int>("PurposeKey")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte>("IsDeleted");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.HasKey("PurposeKey");

                    b.ToTable("Purpose");
                });

            modelBuilder.Entity("VMS.DataModel.Entities.Role", b =>
                {
                    b.Property<int>("RoleKey")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<byte>("IsDeleted");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("RoleKey");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleKey = 1,
                            Created = new DateTime(2019, 10, 12, 10, 4, 28, 467, DateTimeKind.Local).AddTicks(9868),
                            CreatedBy = "System",
                            Description = "Administrator",
                            IsDeleted = (byte)0,
                            Name = "administrator"
                        });
                });

            modelBuilder.Entity("VMS.DataModel.Entities.User", b =>
                {
                    b.Property<int>("UserKey")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte>("IsDeleted");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("RoleKey");

                    b.Property<byte[]>("password_hash")
                        .IsRequired();

                    b.Property<byte[]>("password_salt")
                        .IsRequired();

                    b.HasKey("UserKey");

                    b.HasIndex("RoleKey");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserKey = 1,
                            Created = new DateTime(2019, 10, 12, 10, 4, 28, 461, DateTimeKind.Local).AddTicks(8678),
                            CreatedBy = "System",
                            Email = "administrator@mail.com",
                            IsDeleted = (byte)0,
                            Name = "admin",
                            RoleKey = 1,
                            password_hash = new byte[] { 37, 23, 222, 181, 199, 135, 95, 94, 253, 112, 16, 78, 15, 121, 110, 145, 226, 168, 232, 157, 25, 152, 179, 59, 202, 179, 158, 15, 214, 17, 190, 36, 35, 181, 108, 9, 236, 28, 16, 159, 163, 227, 15, 128, 220, 24, 126, 83, 212, 146, 122, 181, 197, 83, 98, 227, 225, 57, 102, 99, 216, 202, 143, 190 },
                            password_salt = new byte[] { 165, 125, 10, 149, 251, 169, 130, 184, 78, 184, 179, 126, 218, 234, 121, 108, 50, 129, 119, 83, 133, 130, 114, 191, 115, 245, 67, 210, 109, 140, 186, 84, 34, 83, 177, 151, 0, 251, 52, 249, 101, 137, 26, 232, 214, 149, 244, 187, 32, 150, 110, 231, 21, 144, 136, 161, 187, 225, 218, 109, 73, 132, 8, 183, 221, 185, 233, 94, 19, 101, 147, 183, 114, 201, 77, 40, 93, 103, 124, 204, 47, 122, 220, 208, 155, 241, 233, 49, 103, 246, 25, 78, 184, 213, 99, 88, 191, 176, 10, 119, 145, 178, 179, 235, 159, 245, 70, 214, 118, 63, 162, 49, 156, 97, 221, 96, 162, 10, 191, 124, 20, 160, 100, 66, 128, 9, 7, 103 }
                        });
                });

            modelBuilder.Entity("VMS.DataModel.Entities.Visitor", b =>
                {
                    b.Property<int>("VisitorKey")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .HasMaxLength(100);

                    b.Property<string>("Company")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<int>("EmployeeKey");

                    b.Property<int>("EmployeeRequestKey");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("Gender");

                    b.Property<string>("Image");

                    b.Property<byte>("IsDeleted");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<int>("PurposeKey");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Status");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(50);

                    b.Property<string>("TaxNumberVisitor")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("VisitorKey");

                    b.HasIndex("EmployeeKey");

                    b.HasIndex("PurposeKey");

                    b.ToTable("Visitor");
                });

            modelBuilder.Entity("VMS.DataModel.Entities.Employee", b =>
                {
                    b.HasOne("VMS.DataModel.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentKey")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VMS.DataModel.Entities.EmployeeRequest", b =>
                {
                    b.HasOne("VMS.DataModel.Entities.Employee", "Employee")
                        .WithMany("EmployeeRequests")
                        .HasForeignKey("EmployeeKey")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VMS.DataModel.Entities.Purpose", "Purpose")
                        .WithMany("EmployeeRequests")
                        .HasForeignKey("PurposeKey")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VMS.DataModel.Entities.User", b =>
                {
                    b.HasOne("VMS.DataModel.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleKey")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VMS.DataModel.Entities.Visitor", b =>
                {
                    b.HasOne("VMS.DataModel.Entities.Employee", "Employee")
                        .WithMany("Visitors")
                        .HasForeignKey("EmployeeKey")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VMS.DataModel.Entities.Purpose", "Purpose")
                        .WithMany("Visitors")
                        .HasForeignKey("PurposeKey")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
